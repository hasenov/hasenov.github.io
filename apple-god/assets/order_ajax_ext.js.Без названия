

(function () {
    'use strict';

    var initParent = BX.Sale.OrderAjaxComponent.init;

    BX.namespace('BX.Sale.OrderAjaxComponentExt');

    BX.Sale.OrderAjaxComponentExt = BX.Sale.OrderAjaxComponent;


    BX.Sale.OrderAjaxComponentExt.init = function (parameters) {

        initParent.apply(this, arguments);

        var editSteps = this.orderBlockNode.querySelectorAll('.bx-soa-editstep'), i;
        for (i in editSteps) {
            if (editSteps.hasOwnProperty(i)) {
                BX.remove(editSteps[i]);
            }
        }

        BX.addCustomEvent("OnBasketChange", function(){
            BX.Sale.OrderAjaxComponentExt.sendRequest()
        });
        BX.addCustomEvent("onAjaxSuccess", function(){
            $('[autocomplete="tel"]').inputmask("+7 (999) 999 99 99");
        });
        $('[autocomplete="tel"]').inputmask("+7 (999) 999 99 99");
    }

    BX.Sale.OrderAjaxComponentExt.editSection = function(section)
    {
        if (!section || !section.id)
            return;

        if (this.result.SHOW_AUTH && section.id != this.authBlockNode.id && section.id != this.basketBlockNode.id)
            section.style.display = 'none';
        else if (section.id != this.pickUpBlockNode.id)
            section.style.display = '';

        var active = true, errorContainer;



        errorContainer = section.querySelector('.alert.alert-danger');
        this.hasErrorSection[section.id] = errorContainer && errorContainer.style.display != 'none';

        switch (section.id)
        {
            case this.authBlockNode.id:
                this.editAuthBlock();
                break;
            case this.basketBlockNode.id:
                this.editBasketBlock(active);
                break;
            case this.regionBlockNode.id:
                this.editRegionBlock(active);
                break;
            case this.paySystemBlockNode.id:
                this.editPaySystemBlock(active);
                break;
            case this.deliveryBlockNode.id:
                this.editDeliveryBlock(active);
                break;
            case this.pickUpBlockNode.id:
                this.editPickUpBlock(active);
                break;
            case this.propsBlockNode.id:
                this.editPropsBlock(active);
                break;
        }

        if (active)
            section.setAttribute('data-visited', 'true');
    }

    BX.Sale.OrderAjaxComponentExt.locationsCompletion = function()
    {
        var i, locationNode, clearButton, inputStep, inputSearch,
            arProperty, data, section;

        this.locationsInitialized = true;
        this.fixLocationsStyle(this.regionBlockNode, this.regionHiddenBlockNode);
        this.fixLocationsStyle(this.propsBlockNode, this.propsHiddenBlockNode);

        for (i in this.locations)
        {
            if (!this.locations.hasOwnProperty(i))
                continue;

            locationNode = this.orderBlockNode.querySelector('div[data-property-id-row="' + i + '"]');
            if (!locationNode)
                continue;

            clearButton = locationNode.querySelector('div.bx-ui-sls-clear');
            inputStep = locationNode.querySelector('div.bx-ui-slst-pool');
            inputSearch = locationNode.querySelector('input.bx-ui-sls-fake[type=text]');

            locationNode.removeAttribute('style');
            this.bindValidation(i, locationNode);
            if (clearButton)
            {
                BX.bind(clearButton, 'click', function(e){
                    var target = e.target || e.srcElement,
                        parent = BX.findParent(target, {tagName: 'DIV', className: 'form-group'}),
                        locationInput;

                    if (parent)
                        locationInput = parent.querySelector('input.bx-ui-sls-fake[type=text]');

                    if (locationInput)
                        BX.fireEvent(locationInput, 'keyup');
                });
            }

            if (!this.firstLoad && this.options.propertyValidation)
            {
                if (inputStep)
                {
                    arProperty = this.validation.properties[i];
                    data = this.getValidationData(arProperty, locationNode);
                    section = BX.findParent(locationNode, {className: 'bx-soa-section'});

                    if (section && section.getAttribute('data-visited') == 'true')
                        this.isValidProperty(data);
                }

                if (inputSearch)
                    BX.fireEvent(inputSearch, 'keyup');
            }
        }

        if (this.firstLoad && this.result.IS_AUTHORIZED && typeof this.result.LAST_ORDER_DATA.FAIL === 'undefined')
        {
            this.showActualBlock();
        }
        else if (!this.result.SHOW_AUTH)
        {
            this.changeVisibleContent();
        }

        this.checkNotifications();

        // if (this.activeSectionId !== this.regionBlockNode.id)
        //     this.editFadeRegionContent(this.regionBlockNode.querySelector('.bx-soa-section-content'));
        //
        // if (this.activeSectionId != this.propsBlockNode.id)
        //     this.editFadePropsContent(this.propsBlockNode.querySelector('.bx-soa-section-content'));
    }

    BX.Sale.OrderAjaxComponentExt.getPersonTypeControl = function(node)
    {
        if (!this.result.PERSON_TYPE)
            return;

        this.result.PERSON_TYPE = this.getPersonTypeSortedArray(this.result.PERSON_TYPE);

        var personTypesCount = this.result.PERSON_TYPE.length,
            currentType, oldPersonTypeId, i,
            input, options = [], label, delimiter = false;

        if (personTypesCount > 1)
        {
            input = BX.create('DIV', {
                props: {className: 'checkout-settings__block form-checkout-settings'},
            });
            node.appendChild(input);
            node = input;
        }

        if (personTypesCount > 1)
        {
            for (i in this.result.PERSON_TYPE)
            {
                if (this.result.PERSON_TYPE.hasOwnProperty(i))
                {
                    currentType = this.result.PERSON_TYPE[i];
                    options.push(
                        BX.create('LABEL', {
                            props: {
                                className: 'payment-method__btn-wrap col-12 col-sm-6 col-md-4 col-lg-3',
                            },
                            children: [
                                BX.create('INPUT', {
                                    props: {
                                        className: 'checkbox__input hidden',
                                        name: 'PERSON_TYPE',
                                        type: 'radio',
                                        value: currentType.ID,
                                        checked: currentType.CHECKED == 'Y'
                                    },
                                    text: currentType.NAME
                                }),
                                BX.create('DIV', {
                                    props: {
                                        className: 'personal-type__btn btn btn--dark',
                                    },
                                    text: currentType.NAME
                                })
                            ]
                        })
                    );

                    if (currentType.CHECKED == 'Y')
                        oldPersonTypeId = currentType.ID;
                }

            }
            node.appendChild(BX.create('DIV', {
                props: {className: 'form-checkout-settings__row row'},
                children: options,
                events: {change: BX.proxy(this.sendRequest, this)}
            }));

            this.regionBlockNotEmpty = true;
        }
        else
        {
            for (i in this.result.PERSON_TYPE)
                if (this.result.PERSON_TYPE.hasOwnProperty(i))
                    node.appendChild(BX.create('INPUT', {props: {type: 'hidden', name: 'PERSON_TYPE', value: this.result.PERSON_TYPE[i].ID}}));
        }

        if (oldPersonTypeId)
        {
            node.appendChild(
                BX.create('INPUT', {
                    props: {
                        type: 'hidden',
                        name: 'PERSON_TYPE_OLD',
                        value: oldPersonTypeId

                    }
                })
            );
        }
    }

    BX.Sale.OrderAjaxComponentExt.editActiveRegionBlock = function(activeNodeMode)
    {
        var node = activeNodeMode ? this.regionBlockNode : this.regionHiddenBlockNode,
            regionContent, regionNode, regionNodeCol;

        if (this.initialized.region)
        {
            BX.remove(BX.lastChild(node));
            node.appendChild(BX.firstChild(this.regionHiddenBlockNode));
        }
        else
        {
            regionContent = node.querySelector('.bx-soa-section-content');
            if (!regionContent)
            {
                regionContent = this.getNewContainer();
                node.appendChild(regionContent);
            }
            else
                BX.cleanNode(regionContent);

            this.getErrorContainer(regionContent);

            regionNode = BX.create('DIV', {props: {className: 'bx_soa_location'}});


            this.getPersonTypeControl(regionNode);

            this.getProfilesControl(regionNode);

            this.getDeliveryLocationInput(regionNode);

            if (!this.result.SHOW_AUTH)
            {
                if (this.regionBlockNotEmpty)
                {
                    BX.addClass(this.regionBlockNode, 'bx-active');
                    this.regionBlockNode.style.display = '';
                }
                else
                {
                    BX.removeClass(this.regionBlockNode, 'bx-active');
                    this.regionBlockNode.style.display = 'none';

                    if (!this.result.IS_AUTHORIZED || typeof this.result.LAST_ORDER_DATA.FAIL !== 'undefined')
                        this.initFirstSection();
                }
            }

            regionContent.appendChild(regionNode);
            this.getBlockFooter(regionContent);
        }
    }

    BX.Sale.OrderAjaxComponentExt.editActiveDeliveryBlock = function(activeNodeMode)
    {
        var node = activeNodeMode ? this.deliveryBlockNode : this.deliveryHiddenBlockNode,
            deliveryContent, deliveryNode;

        if (this.initialized.delivery)
        {
            BX.remove(BX.lastChild(node));
            node.appendChild(BX.firstChild(this.deliveryHiddenBlockNode));
        }
        else
        {
            deliveryContent = node.querySelector('.bx-soa-section-content');
            if (!deliveryContent)
            {
                deliveryContent = this.getNewContainer();
                node.appendChild(deliveryContent);
            }
            else
                BX.cleanNode(deliveryContent);

            this.getErrorContainer(deliveryContent);

            deliveryNode = BX.create('DIV', {props: {className: 'checkout-settings__block checkout-settings__delivery-method delivery-method'}});
            this.editDeliveryItems(deliveryNode);
            deliveryContent.appendChild(deliveryNode);
            this.editDeliveryInfo(deliveryNode);

            if (this.params.SHOW_COUPONS_DELIVERY == 'Y')
                this.editCoupons(deliveryContent);

            this.getBlockFooter(deliveryContent);
        }
    }

    BX.Sale.OrderAjaxComponentExt.editDeliveryItems = function(deliveryNode)
    {
        if (!this.result.DELIVERY || this.result.DELIVERY.length <= 0)
            return;

        var deliveryItemsContainer = BX.create('DIV', {props: {className: 'delivery-method__checkboxes'}}),
            deliveryItemNode, k;

        for (k = 0; k < this.deliveryPagination.currentPage.length; k++)
        {
            deliveryItemNode = this.createDeliveryItem(this.deliveryPagination.currentPage[k]);
            deliveryItemsContainer.appendChild(deliveryItemNode);
        }

        if (this.deliveryPagination.show)
            this.showPagination('delivery', deliveryItemsContainer);

        deliveryNode.appendChild(BX.create('DIV', {props: {className: 'delivery-method__title'}, text: 'Способ получения:'}));
        deliveryNode.appendChild(deliveryItemsContainer);
    }

    BX.Sale.OrderAjaxComponentExt.createDeliveryItem = function(item)
    {
        var checked = item.CHECKED == 'Y',
            deliveryId = parseInt(item.ID),
            labelNodes = [
                BX.create('INPUT', {
                    props: {
                        id: 'ID_DELIVERY_ID_' + deliveryId,
                        name: 'DELIVERY_ID',
                        type: 'checkbox',
                        className: 'checkbox__input hidden bx-soa-pp-company-checkbox',
                        value: deliveryId,
                        checked: checked
                    }
                }),
                BX.create('SPAN', {
                    props: {
                        className: 'checkbox__box',
                    }
                })
            ],
            deliveryCached = this.deliveryCachedInfo[deliveryId],
            label, title, itemNode;




        if (this.params.SHOW_DELIVERY_LIST_NAMES == 'Y')
        {
            let textStr = this.params.SHOW_DELIVERY_PARENT_NAMES != 'N' ? item.NAME : item.OWN_NAME;
            if (item.PRICE > 0 || typeof item.DELIVERY_DISCOUNT_PRICE !== 'undefined')
            {
                textStr += typeof item.DELIVERY_DISCOUNT_PRICE !== 'undefined'
                            ? ' ' + item.DELIVERY_DISCOUNT_PRICE_FORMATED
                            : ' ' + item.PRICE_FORMATED;
            }
            else if (deliveryCached && (deliveryCached.PRICE > 0 || typeof deliveryCached.DELIVERY_DISCOUNT_PRICE !== 'undefined'))
            {
                textStr += typeof deliveryCached.DELIVERY_DISCOUNT_PRICE !== 'undefined'
                            ? ' ' + deliveryCached.DELIVERY_DISCOUNT_PRICE_FORMATED
                            : ' ' + deliveryCached.PRICE_FORMATED;
            }


            title = BX.create('DIV', {
                props: {className: 'checkbox__text'},
                text: textStr
            });
            labelNodes.push(title)
        }


        label = BX.create('LABEL', {
            props: {
                className: 'delivery-method__checkbox checkbox agec_init'
                    + (item.CALCULATE_ERRORS || deliveryCached && deliveryCached.CALCULATE_ERRORS ? ' bx-bd-waring' : '')},
            children: labelNodes
        });


        itemNode = BX.create('DIV', {
            props: {className: 'delivery-method__checkbox-wrap bx-soa-pp-company'},
            children: [label],
            events: {click: BX.proxy(this.selectDelivery, this)}
        });
        checked && BX.addClass(itemNode, 'bx-selected');

        if (checked && this.result.LAST_ORDER_DATA.PICK_UP)
            this.lastSelectedDelivery = deliveryId;

        return itemNode;
    }

    BX.Sale.OrderAjaxComponentExt.editActivePaySystemBlock = function(activeNodeMode)
    {

        var node = activeNodeMode ? this.paySystemBlockNode : this.paySystemHiddenBlockNode,
            paySystemContent, paySystemNode;

        if (this.initialized.paySystem)
        {
            if(BX.firstChild(this.paySystemHiddenBlockNode)) {
                BX.remove(BX.lastChild(node));
                node.appendChild(BX.firstChild(this.paySystemHiddenBlockNode));
            }else {
                node.appendChild(BX.firstChild(this.paySystemBlockNode));
            }


        }
        else
        {
            paySystemContent = node.querySelector('.bx-soa-section-content');
            if (!paySystemContent)
            {
                paySystemContent = this.getNewContainer();

                node.appendChild(paySystemContent);
            }
            else
                BX.cleanNode(paySystemContent);

            this.getErrorContainer(paySystemContent);
            paySystemNode = BX.create('DIV', {props: {className: 'checkout-settings__block checkout-settings__payment-method payment-method'}});
            this.editPaySystemItems(paySystemNode);
            paySystemContent.appendChild(paySystemNode);
            this.editPaySystemInfo(paySystemNode);
            const curPersonType = this.result.PERSON_TYPE.filter((el) => el.CHECKED == 'Y')[0];


            const hasCardPaymentType = this.result.PAY_SYSTEM.filter((el) => el.ID == 4).length;
            console.log('hasCardPaymentType', hasCardPaymentType)
            if(curPersonType.ID == 1 && !hasCardPaymentType) {
                this.showBlockWarning(this.paySystemBlockNode, '<div>Оплата картой не доступна. В корзине присутствуют товары с оплатой за наличные</div>', true);
            }


            console.log(this.result);
            if (this.params.SHOW_COUPONS_PAY_SYSTEM == 'Y')
                this.editCoupons(paySystemContent);

            this.getBlockFooter(paySystemContent);
        }
    }

    BX.Sale.OrderAjaxComponentExt.editPaySystemItems = function(paySystemNode)
    {
        if (!this.result.PAY_SYSTEM || this.result.PAY_SYSTEM.length <= 0)
            return;

        var paySystemItemsContainer = BX.create('DIV', {props: {className: 'payment-method__btns row'}}),
            paySystemItemNode, i;

        for (i = 0; i < this.paySystemPagination.currentPage.length; i++)
        {
            paySystemItemNode = this.createPaySystemItem(this.paySystemPagination.currentPage[i]);
            paySystemItemsContainer.appendChild(paySystemItemNode);
        }

        if (this.paySystemPagination.show)
            this.showPagination('paySystem', paySystemItemsContainer);

        paySystemNode.appendChild(BX.create('DIV', {props: {className: 'payment-method__title'}, text: 'Способ оплаты:'}));
        paySystemNode.appendChild(paySystemItemsContainer);
    }

    BX.Sale.OrderAjaxComponentExt.createPaySystemItem = function(item)
    {
        var checked = item.CHECKED == 'Y',

            paySystemId = parseInt(item.ID),
            title, label, itemNode;

        if (this.params.SHOW_PAY_SYSTEM_LIST_NAMES == 'Y')
        {
            title = BX.create('DIV', {props: {className: 'c-payment-method__btn btn btn--dark'}, text: item.NAME});
        }

        label = BX.create('label', {
            props: {className: 'payment-method__btn-wrap col-md-3 col-6 agec_init bx-soa-pp-company'},
            children: [
                BX.create('INPUT', {
                    props: {
                        id: 'ID_PAY_SYSTEM_ID_' + paySystemId,
                        name: 'PAY_SYSTEM_ID',
                        type: 'checkbox',
                        className: 'checkbox__input hidden',
                        value: paySystemId,
                        checked: checked
                    }
                }),
                title
            ],
            events: {
                click: BX.proxy(this.selectPaySystem, this)
            }
        });

        if (checked)
            BX.addClass(label, 'bx-selected');

        return label;
    }

    BX.Sale.OrderAjaxComponentExt.editPropsItems = function(propsNode)
    {
        if (!this.result.ORDER_PROP || !this.propertyCollection)
            return;

        var propsItemsContainer = BX.create('DIV', {props: {className: 'form-checkout-settings__row row bx-soa-customer'}}),
            group, property, groupIterator = this.propertyCollection.getGroupIterator(), propsIterator;

        if (!propsItemsContainer)
            propsItemsContainer = this.propsBlockNode.querySelector('.form-checkout-settings__row.bx-soa-customer');

        while (group = groupIterator())
        {
            propsIterator =  group.getIterator();
            while (property = propsIterator())
            {
                if (
                    this.deliveryLocationInfo.loc == property.getId()
                    || this.deliveryLocationInfo.zip == property.getId()
                    || this.deliveryLocationInfo.city == property.getId()
                )
                    continue;

                this.getPropertyRowNode(property, propsItemsContainer, false);
            }
        }

        propsNode.appendChild(propsItemsContainer);
        $('[autocomplete="tel"]').inputmask("+7 (999) 999-9999");
    }

    BX.Sale.OrderAjaxComponentExt.editActivePropsBlock = function(activeNodeMode)
    {
        var node = activeNodeMode ? this.propsBlockNode : this.propsHiddenBlockNode,
            propsContent, propsNode, selectedDelivery, showPropMap = false, i, validationErrors;

        if (this.initialized.props)
        {
            BX.remove(BX.lastChild(node));
            node.appendChild(BX.firstChild(this.propsHiddenBlockNode));
            this.maps && setTimeout(BX.proxy(this.maps.propsMapFocusWaiter, this.maps), 200);
        }
        else
        {
            propsContent = node.querySelector('.bx-soa-section-content');
            if (!propsContent)
            {
                propsContent = this.getNewContainer();
                node.appendChild(propsContent);
            }
            else
                BX.cleanNode(propsContent);

            this.getErrorContainer(propsContent);

            propsNode = BX.create('DIV', {props: {className: ''}});
            selectedDelivery = this.getSelectedDelivery();

            if (
                selectedDelivery && this.params.SHOW_MAP_IN_PROPS === 'Y'
                && this.params.SHOW_MAP_FOR_DELIVERIES && this.params.SHOW_MAP_FOR_DELIVERIES.length
            )
            {
                for (i = 0; i < this.params.SHOW_MAP_FOR_DELIVERIES.length; i++)
                {
                    if (parseInt(selectedDelivery.ID) === parseInt(this.params.SHOW_MAP_FOR_DELIVERIES[i]))
                    {
                        showPropMap = true;
                        break;
                    }
                }
            }

            this.editPropsItems(propsNode);
            showPropMap && this.editPropsMap(propsNode);

            if (this.params.HIDE_ORDER_DESCRIPTION !== 'Y')
            {
                this.editPropsComment(propsNode);
            }

            propsContent.appendChild(propsNode);
            this.getBlockFooter(propsContent);

            if (this.propsBlockNode.getAttribute('data-visited') === 'true')
            {
                validationErrors = this.isValidPropertiesBlock(true);
                if (validationErrors.length)
                    BX.addClass(this.propsBlockNode, 'bx-step-error');
                else
                    BX.removeClass(this.propsBlockNode, 'bx-step-error');
            }
        }
    }

    BX.Sale.OrderAjaxComponentExt.getPropertyRowNode = function(property, propsItemsContainer, disabled)
    {
        var propsItemNode = BX.create('DIV'),
            textHtml = '',
            propertyType = property.getType() || '',
            propertyDesc = property.getDescription() || '',
            label;

        if (disabled)
        {
            propsItemNode.innerHTML = '<strong>' + BX.util.htmlspecialchars(property.getName()) + ':</strong> ';
        }
        else
        {
            if(property.getId() == 3 || property.getId() == 28 || property.getId() == 24 || property.getId() == 25) {
                BX.addClass(propsItemNode, "input__address form-checkout-settings__col col-12 col-lg-12");
            }else if(property.getId() == 26 || property.getId() == 27){
                BX.addClass(propsItemNode, "personal__legal form-checkout-settings__col col-12 col-md-6 col-lg-6");
            }else{
                BX.addClass(propsItemNode, "form-checkout-settings__col col-12 col-md-4 col-lg-4");
            }

            if (property.isRequired())
                textHtml += '<span class="bx-authform-starrequired">*</span> ';

            textHtml += BX.util.htmlspecialchars(property.getName());
            if (propertyDesc.length && propertyType != 'STRING' && propertyType != 'NUMBER' && propertyType != 'DATE')
                textHtml += ' <small>(' + BX.util.htmlspecialchars(propertyDesc) + ')</small>';

            // label = BX.create('LABEL', {
            //     attrs: {'for': 'soa-property-' + property.getId()},
            //     props: {className: 'bx-soa-custom-label'},
            //     html: textHtml
            // });
            propsItemNode.setAttribute('data-property-id-row', property.getId());
            // propsItemNode.appendChild(label);
        }

        switch (propertyType)
        {
            case 'LOCATION':
                this.insertLocationProperty(property, propsItemNode, disabled);
                break;
            case 'DATE':
                this.insertDateProperty(property, propsItemNode, disabled);
                break;
            case 'FILE':
                this.insertFileProperty(property, propsItemNode, disabled);
                break;
            case 'STRING':
                this.insertStringProperty(property, propsItemNode, disabled);
                break;
            case 'ENUM':
                this.insertEnumProperty(property, propsItemNode, disabled);
                break;
            case 'Y/N':
                this.insertYNProperty(property, propsItemNode, disabled);
                break;
            case 'NUMBER':
                this.insertNumberProperty(property, propsItemNode, disabled);
        }

        propsItemsContainer.appendChild(propsItemNode);
    }

    BX.Sale.OrderAjaxComponentExt.alterProperty = function(settings, propContainer)
    {
        var divs = BX.findChildren(propContainer, {tagName: 'DIV'}),
            i, textNode, inputs, del, add,
            fileInputs, accepts, fileTitles;

        if (divs && divs.length)
        {
            for (i = 0; i < divs.length; i++)
            {
                divs[i].style.margin = '5px 0';
            }
        }

        textNode = propContainer.querySelector('input[type=text]');
        if (!textNode)
            textNode = propContainer.querySelector('textarea');

        if (textNode)
        {

            textNode.id = 'soa-property-' + settings.ID;
            if (settings.IS_ADDRESS == 'Y')
                textNode.setAttribute('autocomplete', 'address');
            if (settings.IS_EMAIL == 'Y')
                textNode.setAttribute('autocomplete', 'email');
            if (settings.IS_PAYER == 'Y')
                textNode.setAttribute('autocomplete', 'name');
            if (settings.IS_PHONE == 'Y')
                textNode.setAttribute('autocomplete', 'tel');

            if (settings.PATTERN && settings.PATTERN.length)
            {
                textNode.removeAttribute('pattern');
            }
        }

        inputs = propContainer.querySelectorAll('input[type=text]');
        for (i = 0; i < inputs.length; i++)
        {
            inputs[i].placeholder = settings.DESCRIPTION ? settings.DESCRIPTION :settings.NAME;
            BX.addClass(inputs[i], 'form-checkout-settings__control control bx-soa-customer-input bx-ios-fix');
        }

        inputs = propContainer.querySelectorAll('select');
        for (i = 0; i < inputs.length; i++)
            BX.addClass(inputs[i], 'form-control');

        inputs = propContainer.querySelectorAll('textarea');
        for (i = 0; i < inputs.length; i++)
        {
            inputs[i].placeholder = settings.DESCRIPTION ? settings.DESCRIPTION :settings.NAME;
            BX.addClass(inputs[i], 'form-checkout-settings__control control bx-ios-fix');
        }

        del = propContainer.querySelectorAll('label');
        for (i = 0; i < del.length; i++)
            BX.remove(del[i]);

        if (settings.TYPE == 'FILE')
        {
            if (settings.ACCEPT && settings.ACCEPT.length)
            {
                fileInputs = propContainer.querySelectorAll('input[type=file]');
                accepts = this.getFileAccepts(settings.ACCEPT);
                for (i = 0; i < fileInputs.length; i++)
                    fileInputs[i].setAttribute('accept', accepts);
            }

            fileTitles = propContainer.querySelectorAll('a');
            for (i = 0; i < fileTitles.length; i++)
            {
                BX.bind(fileTitles[i], 'click', function(e){
                    var target = e.target || e.srcElement,
                        fileInput = target && target.nextSibling && target.nextSibling.nextSibling;

                    if (fileInput)
                        BX.fireEvent(fileInput, 'change');
                });
            }
        }

        add = propContainer.querySelectorAll('input[type=button]');
        for (i = 0; i < add.length; i++)
        {
            BX.addClass(add[i], 'btn btn-default btn-sm');

            if (settings.MULTIPLE == 'Y' && i == add.length - 1)
                continue;

            if (settings.TYPE == 'FILE')
            {
                BX.prepend(add[i], add[i].parentNode);
                add[i].style.marginRight = '10px';
            }
        }

        if (add.length)
        {
            add = add[add.length - 1];
            BX.bind(add, 'click', BX.delegate(function(e){
                var target = e.target || e.srcElement,
                    targetContainer = BX.findParent(target, {tagName: 'div', className: 'soa-property-container'}),
                    del = targetContainer.querySelector('label'),
                    add = targetContainer.querySelectorAll('input[type=button]'),
                    textInputs = targetContainer.querySelectorAll('input[type=text]'),
                    textAreas = targetContainer.querySelectorAll('textarea'),
                    divs = BX.findChildren(targetContainer, {tagName: 'DIV'});

                var i, fileTitles, fileInputs, accepts;

                if (divs && divs.length)
                {
                    for (i = 0; i < divs.length; i++)
                    {
                        divs[i].style.margin = '5px 0';
                    }
                }

                this.bindValidation(settings.ID, targetContainer);

                if (add.length && add[add.length - 2])
                {
                    BX.prepend(add[add.length - 2], add[add.length - 2].parentNode);
                    add[add.length - 2].style.marginRight = '10px';
                    BX.addClass(add[add.length - 2], 'btn btn-default btn-sm');
                }

                del && BX.remove(del);
                if (textInputs.length)
                {
                    textInputs[textInputs.length - 1].placeholder = settings.DESCRIPTION;
                    BX.addClass(textInputs[textInputs.length - 1], 'form-checkout-settings__control control bx-soa-customer-input bx-ios-fix');
                    if (settings.TYPE == 'DATE')
                        this.alterDateProperty(settings, textInputs[textInputs.length - 1]);

                    if (settings.PATTERN && settings.PATTERN.length)
                        textInputs[textInputs.length - 1].removeAttribute('pattern');
                }

                if (textAreas.length)
                {
                    textAreas[textAreas.length - 1].placeholder = settings.DESCRIPTION;
                    BX.addClass(textAreas[textAreas.length - 1], 'form-checkout-settings__control control bx-ios-fix');
                }

                if (settings.TYPE == 'FILE')
                {
                    if (settings.ACCEPT && settings.ACCEPT.length)
                    {
                        fileInputs = propContainer.querySelectorAll('input[type=file]');
                        accepts = this.getFileAccepts(settings.ACCEPT);
                        for (i = 0; i < fileInputs.length; i++)
                            fileInputs[i].setAttribute('accept', accepts);
                    }

                    fileTitles = targetContainer.querySelectorAll('a');
                    BX.bind(fileTitles[fileTitles.length - 1], 'click', function(e){
                        var target = e.target || e.srcElement,
                            fileInput = target && target.nextSibling && target.nextSibling.nextSibling;

                        if (fileInput)
                            setTimeout(function(){BX.fireEvent(fileInput, 'change');}, 10);
                    });
                }
            }, this));
        }
    }

    BX.Sale.OrderAjaxComponentExt.insertYNProperty = function(property, propsItemNode, disabled)
    {
        var prop, inputs, values, i, propContainer;


        if (disabled)
        {
            prop = this.propsHiddenBlockNode.querySelector('div[data-property-id-row="' + property.getId() + '"]');
            if (prop)
            {
                values = [];

                inputs = prop.querySelectorAll('input[type=checkbox]');

                for (i = 0; i < inputs.length; i+=2) {
                    values.push(inputs[i].checked ? BX.message('SOA_YES') : BX.message('SOA_NO'));
                }


                propsItemNode.innerHTML += this.valuesToString(values);
            }
        }
        else
        {
            propContainer = BX.create('LABEL', {props: {className: 'form-checkout-settings__checkbox checkbox'}});
            property.appendTo(propContainer);
            propContainer.appendChild(
                BX.create('SPAN', {props: {className: 'checkbox__box'}})
            )
            propContainer.appendChild(
                BX.create('SPAN', {props: {className: 'checkbox__text'}, text: property.getName()})
            )
            propsItemNode.appendChild(propContainer);
            this.alterProperty(property.getSettings(), propContainer);
            this.bindValidation(property.getId(), propContainer);
        }
    }

    BX.Sale.OrderAjaxComponentExt.editPropsComment = function(propsNode)
    {
        var propsCommentContainer, label, input, div;

        propsCommentContainer = BX.create('DIV', {props: {className: 'col-sm-12'}});
        label = BX.create('LABEL', {
            attrs: {for: 'orderDescription'},
            props: {className: 'bx-soa-customer-label'},
            html: this.params.MESS_ORDER_DESC
        });
        input = BX.create('TEXTAREA', {
            props: {
                id: 'orderDescription',
                cols: '4',
                className: 'form-control bx-soa-customer-textarea bx-ios-fix',
                name: 'ORDER_DESCRIPTION'
            },
            text: this.result.ORDER_DESCRIPTION ? this.result.ORDER_DESCRIPTION : ''
        });
        div = BX.create('DIV', {
            props: {className: 'form-group bx-soa-customer-field'},
            children: [label, input]
        });

        propsCommentContainer.appendChild(div);
        // propsNode.appendChild(propsCommentContainer);
    }

    BX.Sale.OrderAjaxComponentExt.editTotalBlock = function()
    {
        if (!this.totalInfoBlockNode || !this.result.TOTAL)
            return;

        var total = this.result.TOTAL,
            priceHtml, params = {},
            discText, valFormatted, i,
            curDelivery, deliveryError, deliveryValue,
            showOrderButton = this.params.SHOW_TOTAL_ORDER_BUTTON === 'Y';

        BX.cleanNode(this.totalInfoBlockNode);

        if (parseFloat(total.ORDER_PRICE) === 0)
        {
            priceHtml = this.params.MESS_PRICE_FREE;
            params.free = true;
        }
        else
        {
            priceHtml = total.ORDER_PRICE_FORMATED;
        }

        // if (this.options.showPriceWithoutDiscount)
        // {
        //     priceHtml += '<br><span class="bx-price-old">' + total.PRICE_WITHOUT_DISCOUNT + '</span>';
        // }

        this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_SUM_SUMMARY'), priceHtml, params));

        if (this.options.showOrderWeight)
        {
            this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_SUM_WEIGHT_SUM'), total.ORDER_WEIGHT_FORMATED));
        }

        if (this.options.showTaxList)
        {
            for (i = 0; i < total.TAX_LIST.length; i++)
            {
                valFormatted = total.TAX_LIST[i].VALUE_MONEY_FORMATED || '';
                this.totalInfoBlockNode.appendChild(
                    this.createTotalUnit(
                        total.TAX_LIST[i].NAME + (!!total.TAX_LIST[i].VALUE_FORMATED ? ' ' + total.TAX_LIST[i].VALUE_FORMATED : '') + ':',
                        valFormatted
                    )
                );
            }
        }

        params = {};
        curDelivery = this.getSelectedDelivery();
        deliveryError = curDelivery && curDelivery.CALCULATE_ERRORS && curDelivery.CALCULATE_ERRORS.length;

        if (deliveryError)
        {
            deliveryValue = BX.message('SOA_NOT_CALCULATED');
            params.error = deliveryError;
        }
        else
        {
            if (parseFloat(total.DELIVERY_PRICE) === 0)
            {
                deliveryValue = this.params.MESS_PRICE_FREE;
                params.free = true;
            }
            else
            {
                deliveryValue = total.DELIVERY_PRICE_FORMATED;
            }

            if (
                curDelivery && typeof curDelivery.DELIVERY_DISCOUNT_PRICE !== 'undefined'
                && parseFloat(curDelivery.PRICE) > parseFloat(curDelivery.DELIVERY_DISCOUNT_PRICE)
            )
            {
                deliveryValue += '<br><span class="bx-price-old">' + curDelivery.PRICE_FORMATED + '</span>';
            }
        }

        if (this.result.DELIVERY.length)
        {
            if(total.DELIVERY_PRICE > 0) {
                this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_SUM_DELIVERY'), deliveryValue, params));
            }

        }

        if (this.options.showDiscountPrice)
        {
            discText = this.params.MESS_ECONOMY;
            if (total.DISCOUNT_PERCENT_FORMATED && parseFloat(total.DISCOUNT_PERCENT_FORMATED) > 0)
                discText += total.DISCOUNT_PERCENT_FORMATED;

            // this.totalInfoBlockNode.appendChild(this.createTotalUnit(discText + ':', total.DISCOUNT_PRICE_FORMATED, {highlighted: true}));
        }

        if (this.options.showPayedFromInnerBudget)
        {
            this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_SUM_IT'), total.ORDER_TOTAL_PRICE_FORMATED));
            this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_SUM_PAYED'), total.PAYED_FROM_ACCOUNT_FORMATED));
            this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_SUM_LEFT_TO_PAY'), total.ORDER_TOTAL_LEFT_TO_PAY_FORMATED, {total: true}));
        }
        else
        {
            this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_SUM_IT'), total.ORDER_TOTAL_PRICE_FORMATED, {total: true}));
        }

        if (parseFloat(total.PAY_SYSTEM_PRICE) >= 0 && this.result.DELIVERY.length)
        {
            this.totalInfoBlockNode.appendChild(this.createTotalUnit(BX.message('SOA_PAYSYSTEM_PRICE'), '~' + total.PAY_SYSTEM_PRICE_FORMATTED));
        }

        if (!this.result.SHOW_AUTH)
        {
            this.totalInfoBlockNode.appendChild(
                BX.create('DIV', {
                    props: {className: 'bx-soa-cart-total-button-container' + (!showOrderButton ? ' visible-xs' : '')},
                    children: [
                        BX.create('A', {
                            props: {
                                href: 'javascript:void(0)',
                                className: 'form-checkout__btn btn btn--secondary btn-order-save'
                            },
                            html: this.params.MESS_ORDER,
                            events: {
                                click: BX.proxy(this.clickOrderSaveAction, this)
                            }
                        })

                    ]
                })
            );
        }
        if(BX('bxSoaCoupon')) {
            BX('bxSoaCoupon').remove()
        }

        this.editCoupons(this.totalBlockNode);
        // this.editMobileTotalBlock();
    }


    BX.Sale.OrderAjaxComponentExt.editCoupons = function(basketItemsNode)
    {
        const promocodeBtn = BX.create('BUTTON', {
            props: {
                className: 'c-promocodes__btn btn btn--dark',
            },
            text: 'Применить',
            events: {
                click: BX.delegate(function(event){
                    event.preventDefault();
                    const newCoupon = BX('promocodeField');
                    if (newCoupon && newCoupon.value)
                    {
                        this.sendRequest('enterCoupon', newCoupon.value);
                        newCoupon.value = '';
                    }
                }, this)
            }
        });

        let childrenArr = [
            BX.create('DIV', {
                props: {className: 'promocodes__group'},
                children: [
                    BX.create('INPUT', {
                        props: {
                            id: 'promocodeField',
                            className: 'promocodes__control control',
                            type: 'text',
                            placeholder: 'Есть промокод?'
                        },
                        // events: {
                        //     change: BX.delegate(function(event){
                        //         var newCoupon = BX.getEventTarget(event);
                        //         if (newCoupon && newCoupon.value)
                        //         {
                        //             this.sendRequest('enterCoupon', newCoupon.value);
                        //             newCoupon.value = '';
                        //         }
                        //     }, this)
                        // }
                    }),
                    promocodeBtn
                ]
            }),
        ];
        var couponsList = this.getCouponsList(true);

        if(couponsList) {
            childrenArr.push( BX.create('DIV', {props: {className: 'bx-soa-coupon-item'}, children: couponsList}))
        }

      var   couponsBlock = BX.create('DIV', {
                props: {className: 'checkout__block promocodes'},
                children: childrenArr
            });

        basketItemsNode.appendChild(
            BX.create('DIV', {
                props: {className: 'bx-soa-coupon', id: 'bxSoaCoupon'},
                children: [
                    couponsBlock
                ]
            })
        );
    }

    BX.Sale.OrderAjaxComponentExt.getCouponNode = function(coupon, active)
    {
        console.log('coupon', coupon)
        var couponName = BX.util.htmlspecialchars(coupon.text) || '',
            couponDesc = coupon.desc && coupon.desc.length
                ? coupon.desc.charAt(0).toUpperCase() + coupon.desc.slice(1)
                : BX.message('SOA_NOT_FOUND'),
            couponStatus = coupon.status || 'BAD',
            couponItem, tooltip;

        switch (couponStatus.toUpperCase())
        {
            case 'ENTERED': couponItem = 'danger'; tooltip = 'warning'; break;
            case 'BAD': couponItem = tooltip = 'danger'; break;
            default: couponItem = tooltip  = 'muted';
        }

        return BX.create('DIV', {
            attrs: {
                'data-coupon': couponName,
                className: 'basket-coupon-alert  text-' + couponItem
            },
            children: active ? [
                BX.create('SPAN', {
                    props: {className: 'basket-coupon-text'},
                    children: [
                        BX.create('STRONG', {
                            text: couponName || '',
                        }),
                        BX.create('SPAN', {props: {className: 'tooltip-inner'}, text: ' - ' + couponDesc})
                    ]
                }),
                BX.create('SPAN', {
                    props: {className: 'close-link'},
                    text: 'Удалить',
                    events: {
                        click: BX.delegate(function(e){
                            var target = e.target || e.srcElement,
                                coupon = BX.findParent(target, {tagName: 'DIV', className: 'basket-coupon-alert'});

                            if (coupon && coupon.getAttribute('data-coupon'))
                            {
                                this.sendRequest('removeCoupon', coupon.getAttribute('data-coupon'))
                            }
                        }, this)
                    }
                }),

            ] : [couponName]
        });
    }

    BX.Sale.OrderAjaxComponentExt.getCouponsList = function(active)
    {
        var couponsList = [], i;

        for (i = 0; i < this.result.COUPON_LIST.length; i++)
        {
            if (active || (!active && this.result.COUPON_LIST[i].JS_STATUS == 'APPLIED'))
            {
                let desc = this.result.COUPON_LIST[i].JS_CHECK_CODE;
                if(this.result.COUPON_LIST[i].DISCOUNT_NAME) {
                     desc += ` (${this.result.COUPON_LIST[i].DISCOUNT_NAME})`
                }

                couponsList.push(this.getCouponNode({
                    text: this.result.COUPON_LIST[i].COUPON,
                    desc: desc,
                    status: this.result.COUPON_LIST[i].JS_STATUS
                }, active));
            }
        }

        return couponsList;
    }

    BX.Sale.OrderAjaxComponentExt.createTotalUnit = function(name, value, params)
    {
        var totalValue, className = 'bx-soa-cart-total-line';

        name = name || '';
        value = value || '';
        params = params || {};

        if (params.error)
        {
            totalValue = [BX.create('A', {
                props: {className: 'bx-soa-price-not-calc'},
                html: value,
                events: {
                    click: BX.delegate(function(){
                        this.animateScrollTo(this.deliveryBlockNode);
                    }, this)
                }
            })];
        }
        else if (params.free)
        {
            totalValue = [BX.create('SPAN', {
                props: {className: 'bx-soa-price-free'},
                html: value
            })];
        }
        else
        {
            totalValue = [value];
        }

        if (params.total)
        {
            className += ' form-checkout__price';
        }

        if (params.highlighted)
        {
            className += ' bx-soa-cart-total-line-highlighted';
        }

        return BX.create('DIV', {
            props: {className: className},
            children: [
                BX.create('SPAN', {props: {className: 'bx-soa-cart-t'}, text: name}),
                BX.create('SPAN', {
                    props: {
                        className: 'bx-soa-cart-d' + (!!params.total && this.options.totalPriceChanged ? ' bx-soa-changeCostSign' : '')
                    },
                    children: totalValue
                })
            ]
        });
    }

    BX.Sale.OrderAjaxComponentExt.isValidForm = function()
    {
        if (!this.options.propertyValidation)
            return true;

        var regionErrors = this.isValidRegionBlock(),
            propsErrors = this.isValidPropertiesBlock(),
            navigated = false, tooltips, i;

        if (regionErrors.length)
        {
            navigated = true;
            this.animateScrollTo(this.regionBlockNode, 800, 50);
        }

        if (propsErrors.length && !navigated)
        {
            if (this.activeSectionId == this.propsBlockNode.id)
            {
                tooltips = this.propsBlockNode.querySelectorAll('div.tooltip');
                for (i = 0; i < tooltips.length; i++)
                {
                    if (tooltips[i].getAttribute('data-state') == 'opened')
                    {
                        this.animateScrollTo(BX.findParent(tooltips[i], {className: 'form-group bx-soa-customer-field'}), 800, 50);
                        break;
                    }
                }
            }
            else
                this.animateScrollTo(this.propsBlockNode, 800, 50);
        }

        if (regionErrors.length)
        {
            this.showError(this.regionBlockNode, regionErrors);
            BX.addClass(this.regionBlockNode, 'bx-step-error');
        }

        if (propsErrors.length)
        {
            if (this.activeSectionId !== this.propsBlockNode.id)
                this.showError(this.propsBlockNode, propsErrors);

            BX.addClass(this.propsBlockNode, 'bx-step-error');
        }
        return !(regionErrors.length + propsErrors.length);
        // const privacyCheck = BX('privacyCheck').checked;
        // $('#privacyCheck').next().removeClass('form__error')
        // if(!privacyCheck) {
        //     $('#privacyCheck').next().addClass('form__error')
        // }
        //
        // return !(regionErrors.length + propsErrors.length) && privacyCheck;
    }

    BX.Sale.OrderAjaxComponentExt.getNewContainer = function(notFluid)
    {
        return BX.create('DIV', {props: {className: 'bx-soa-section-content' }});
    }

    BX.Sale.OrderAjaxComponentExt.totalBlockScrollCheck = function()
    {
        if (!this.totalBlockNode || !this.totalGhostBlockNode)
            return;

        var scrollTop = BX.GetWindowScrollPos().scrollTop,
            ghostTop = BX.pos(BX('bxSoaTotalContainer')).top,
            ghostBottom = BX.pos(this.orderBlockNode).bottom,
            width;

        if (ghostBottom - this.totalBlockNode.offsetHeight < scrollTop + 100)
            BX.addClass(this.totalBlockNode, 'bx-soa-cart-total-bottom');
        else
            BX.removeClass(this.totalBlockNode, 'bx-soa-cart-total-bottom');

        if (scrollTop > ghostTop && !BX.hasClass(this.totalBlockNode, 'bx-soa-cart-total-fixed'))
        {
            width = this.totalBlockNode.offsetWidth;
            BX.addClass(this.totalBlockNode, 'bx-soa-cart-total-fixed');
            // this.totalGhostBlockNode.style.paddingTop = this.totalBlockNode.offsetHeight + 'px';
            this.totalGhostBlockNode.style.paddingTop = 0;
            this.totalBlockNode.style.width = width + 'px';
            this.totalBlockNode.style.top = 10;
        }
        else if (scrollTop < ghostTop && BX.hasClass(this.totalBlockNode, 'bx-soa-cart-total-fixed'))
        {
            BX.removeClass(this.totalBlockNode, 'bx-soa-cart-total-fixed');
            this.totalBlockNode.style.top = BX('bxSoaTotalContainer').offsetHeight + scrollTop + 20;
            this.totalGhostBlockNode.style.paddingTop = 0;
            this.totalBlockNode.style.width = '';
        }
    }

    BX.Sale.OrderAjaxComponentExt.getBlockFooter = function(node)
    {

    }

    BX.Sale.OrderAjaxComponentExt.initFirstSection = function (parameters) {

    };
})();